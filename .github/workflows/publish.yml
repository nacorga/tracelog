name: Version & Publish Package

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  version_and_publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache NPM registry
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org/'
          scope: '@tracelog'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build:all

      - name: Lint
        run: npm run lint

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      - name: Install Playwright browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Install standard-version
        run: npm install --save-dev standard-version

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet HEAD^ HEAD; then
            echo "No changes detected, skipping version bump"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, proceeding with version bump"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        if: steps.check_changes.outputs.skip == 'false' && success()
        id: bump_version
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          npx standard-version \
            --release-as patch \
            --releaseCommitMessageFormat "chore(release): {{currentTag}} [skip ci]" \
            --no-verify \
            --tag-prefix "v"
          git push --follow-tags origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        if: steps.bump_version.outcome == 'success'
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.bump_version.outcome == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: ${{ steps.get_tag.outputs.tag }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: Build the dist folder
        if: steps.bump_version.outcome == 'success'
        run: npm run build-ugly

      - name: Publish to NPM
        if: steps.bump_version.outcome == 'success'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      - name: Clean up RC versions
        if: steps.bump_version.outcome == 'success'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "ðŸ§¹ Cleaning up RC versions..."
          node scripts/rc-manager.js cleanup || echo "No RC versions to clean"
          npm dist-tag add @tracelog/client@$CURRENT_VERSION latest
          echo "âœ… Published version $CURRENT_VERSION as latest"