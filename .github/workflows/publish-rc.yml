name: Publish Release Candidate

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  publish_rc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org/'
          scope: '@tracelog'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ hashFiles('src/**/*', 'tsconfig*.json', 'vite.config.mjs') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build
        run: npm run build:all

      - name: Lint
        run: npm run lint

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwoff2-dev

      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        if: steps.cache-playwright.outputs.cache-hit != 'true'

      - name: Verify Playwright installation
        run: npx playwright --version

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Generate RC version
        id: rc_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.current_version }}
          PR_NUMBER=${{ github.event.pull_request.number }}
          RUN_NUMBER=${{ github.run_number }}
          
          # Increment patch version and add RC
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEW_PATCH=$((patch + 1))
          RC_VERSION="${major}.${minor}.${NEW_PATCH}-rc.${PR_NUMBER}.${RUN_NUMBER}"
          
          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT
          echo "üîÑ New RC version generated: $RC_VERSION"
          echo "üìù This is version #${RUN_NUMBER} of PR #${PR_NUMBER}"

      - name: Update package.json version
        run: |
          RC_VERSION=${{ steps.rc_version.outputs.rc_version }}
          npm version $RC_VERSION --no-git-tag-version

      - name: Build the dist folder
        run: npm run build-ugly

      - name: Publish RC to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --access public --tag rc
          echo "üì¶ Published RC: ${{ steps.rc_version.outputs.rc_version }}"
          echo "üè∑Ô∏è Tag 'rc' now points to: ${{ steps.rc_version.outputs.rc_version }}"

      - name: List RC versions for this PR
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "üìã RC versions for PR #${PR_NUMBER}:"
          npm view @tracelog/client versions --json | jq -r '.[]' | grep -E "\-rc\.${PR_NUMBER}\." | sort -V || echo "This is the first RC version for this PR"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const rcVersion = '${{ steps.rc_version.outputs.rc_version }}';
            const runNumber = '${{ github.run_number }}';
            const prNumber = '${{ github.event.pull_request.number }}';
            const commitSha = '${{ github.event.pull_request.head.sha }}';
            const shortSha = commitSha.substring(0, 7);
            
            const comment = `üöÄ **New RC version published!**
            
            **Version:** \`${rcVersion}\`
            **NPM Tag:** \`rc\`
            **Commit:** \`${shortSha}\`
            **Iteration:** #${runNumber} of PR #${prNumber}
            
            **Install this RC version:**
            \`\`\`bash
            # Specific version
            npm install @tracelog/client@${rcVersion}
            
            # Latest RC version (auto-updated)
            npm install @tracelog/client@rc
            \`\`\`
            
            ‚ú® **Each push to this PR will generate a new RC version automatically.**
            
            üì¶ The new RC version replaces the previous one in the \`rc\` tag.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 